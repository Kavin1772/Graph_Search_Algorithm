import heapq
import matplotlib.pyplot as plt
from matplotlib.patches import Rectangle

# Define grid dimensions and representation (0 for passable, 1 for impassable)
grid = [
    [0, 1, 0, 0, 0],
    [0, 0, 0, 1, 0],
    [0, 1, 0, 0, 0],
    [0, 0, 0, 1, 0],
    [0, 0, 0, 0, 0]
]

# Define start and goal coordinates
start = (0, 0)
goal = (4, 4)

# Define possible movements (up, down, left, right)
movements = [(0, 1), (0, -1), (1, 0), (-1, 0)]

# Define heuristic function (Manhattan distance)
def heuristic(node, goal):
    return abs(node[0] - goal[0]) + abs(node[1] - goal[1])

# A* algorithm
def astar(grid, start, goal):
    rows, cols = len(grid), len(grid[0])
    open_list = [(0, start)]
    heapq.heapify(open_list)
    g_costs = {start: 0}
    parents = {start: None}

    while open_list:
        current_cost, current_node = heapq.heappop(open_list)
        if current_node == goal:
            path = []
            while current_node:
                path.append(current_node)
                current_node = parents[current_node]
            return path[::-1]

        for dx, dy in movements:
            neighbor = (current_node[0] + dx, current_node[1] + dy)
            if 0 <= neighbor[0] < rows and 0 <= neighbor[1] < cols:
                if grid[neighbor[0]][neighbor[1]] == 0:
                    tentative_g_cost = g_costs[current_node] + 1
                    if neighbor not in g_costs or tentative_g_cost < g_costs[neighbor]:
                        g_costs[neighbor] = tentative_g_cost
                        f_cost = tentative_g_cost + heuristic(neighbor, goal)
                        heapq.heappush(open_list, (f_cost, neighbor))
                        parents[neighbor] = current_node

    return None

# Function to visualize the grid and path
def visualize_grid(grid, path):
    rows = len(grid)
    cols = len(grid[0])

    fig, ax = plt.subplots(figsize=(cols, rows))

    for row in range(rows):
        for col in range(cols):
            if grid[row][col] == 1:
                ax.add_patch(Rectangle((col, row), 1, 1, facecolor='red'))
            else:
                ax.add_patch(Rectangle((col, row), 1, 1, facecolor='white', edgecolor='black'))

    if path:
        for node in path:
            ax.add_patch(Rectangle((node[1], node[0]), 1, 1, facecolor='green'))

    ax.add_patch(Rectangle((start[1], start[0]), 1, 1, facecolor='blue'))
    ax.add_patch(Rectangle((goal[1], goal[0]), 1, 1, facecolor='yellow'))

    plt.xlim(0, cols)
    plt.ylim(0, rows)
    plt.gca().invert_yaxis()
    plt.xlabel('Columns')
    plt.ylabel('Rows')
    plt.title('Grid Representation with A* Path')
    plt.grid(True)
    plt.show()

# Find the path using A*
path = astar(grid, start, goal)

# Visualize the grid and path
if path:
    print("Shortest Path:", path)
    visualize_grid(grid, path)
else:
    print("No path found.")
